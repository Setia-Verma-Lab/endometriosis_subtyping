
rule all:
    input:
        # expand('{dataset}/{dataset}_{ancestry}/sample_list.txt', dataset=['PMBB', 'UKBB', 'eMERGE'], ancestry=['EUR', 'AFR', 'ASIAN']),
        'all_sample_sizes.csv',
        '../Manuscript_Tables/table_1_datasets.csv'

rule set_up_dataset_cohorts:
    output:
        pheno='{dataset}/{dataset}_{ancestry}/saige_pheno_covars.txt',
        samples='{dataset}/{dataset}_{ancestry}/sample_list.txt'
    input:
        master_pheno='../Feature_Extraction/cluster_phenotypes_multi_ancestry.csv'
    run:
        import pandas as pd

        pheno = pd.read_csv(input.master_pheno, index_col='IID')
        pheno = pheno[pheno['Dataset'] == wildcards.dataset]
        pheno = pheno[pheno['ANCESTRY'] == wildcards.ancestry]
        print(pheno)
        print(pheno.columns)

        pheno_cols = ['endometriosis']
        pheno_cols.extend([c for c in pheno.columns if 'cluster' in c])
        pheno_cols.append('CURRENT_AGE')

        if wildcards.dataset != 'PMBB':
            pheno.index = pheno.index.to_series().str.replace(wildcards.dataset, '')

        pheno = pheno[~pheno.index.duplicated()]
        print(pheno)

        output_pheno = pheno[pheno_cols].copy()

        col_map = {}
        if wildcards.dataset == 'eMERGE':
            output_pheno['site'] = output_pheno.index.to_series().str[:2]
            keep_sites = ['16', '27', '49', '52', '68', '74']
            output_pheno = output_pheno[output_pheno.site.isin(keep_sites)]
            genetic_data_samples = pd.read_table('/project/ritchie/datasets/eMERGE/eMERGE_III_Imputed_UW/V2_wHarvard/eMERGE_Info_QC/subset.22.fam', header=None, dtype=str)[0]
            print(output_pheno['site'].value_counts())
            output_pheno['site_27'] = (output_pheno['site'] == '27').astype(int)
            output_pheno['site_49'] = (output_pheno['site'] == '49').astype(int)
            output_pheno['site_52'] = (output_pheno['site'] == '52').astype(int)
            output_pheno['site_68'] = (output_pheno['site'] == '68').astype(int)
            output_pheno['site_74'] = (output_pheno['site'] == '74').astype(int)
            pc_file = '/project/ritchie01/datasets/eMERGE/eMERGE_III_Imputed_UW/V2_wHarvard/R-squared_summary_and_accessory_files/chr1-22.merged.maf.05.LD_1000_50_.7_pruned.no_tri.plink.pca-approx.eigenvec'
            pc_file_index_col = 'IID'
            need_cols = [pc_file_index_col]
            need_cols.extend([f'PC{i+1}' for i in range(10)])
        elif wildcards.dataset == 'PMBB':
            pc_file = '/project/PMBB/PMBB-Release-2020-2.0/Genotype/PCA/PMBB-Release-2020-2.0_genetic_genotype.eigenvec'
            genetic_data_samples = pd.read_table('/project/ritchie02/projects/gwPheWAS/PMBB-Release-2020-2.0_genetic_imputed-topmed-r2_bgen.sample', dtype=str)['ID_1']
            pc_file_index_col = 'PMBB_ID'
            need_cols = [pc_file_index_col]
            need_cols.extend([f'PC{i+1}' for i in range(10)])
        elif wildcards.dataset == 'UKBB':
            for i in range(1, 10):
                col_map['f.22009.0.' + str(i)] = 'PC' + str(i)
            pc_file = '/project/ritchie01/datasets/UKBiobank/phenotype/ukb43665/ukb43665.tab'
            genetic_data_samples = pd.read_table('/project/ritchie/datasets/UKBiobank/ukb_genotype_fam/imputed/ukb32133_imp_chr22_v3_s487324.sample', dtype=str, sep=' ')['ID_1']
            pc_file_index_col = 'f.eid'
            need_cols = [pc_file_index_col]
            need_cols.extend(col_map.keys())

        print(len(output_pheno))
        output_pheno = output_pheno.loc[output_pheno.index.intersection(genetic_data_samples)]
        print(len(output_pheno), 'after dropping samples not in the genetic data files we need')
        print(output_pheno[pheno_cols].apply(lambda x: x.value_counts()).transpose())

        pc_df = pd.read_table(pc_file, index_col=pc_file_index_col, dtype={pc_file_index_col: str}, usecols=need_cols)
        pc_df = pc_df.rename(columns=col_map)
        pc_df = pc_df.loc[pc_df.index.intersection(output_pheno.index)]

        output_pheno = pd.concat([output_pheno, pc_df], axis=1)
        output_pheno.index.name = 'IID'

        print(output_pheno)
        output_pheno.to_csv(output.pheno, sep='\t')
        open(output.samples, 'w+').write('\n'.join(output_pheno.index))

rule make_sample_sizes:
    output:
        counts='all_sample_sizes.csv',
        supp_table='../Manuscript_Tables/supp_table_4_sample_sizes_by_ancestry.csv'
    input:
        pheno_file='../Feature_Extraction/cluster_phenotypes_multi_ancestry.csv',
        aou_counts='AOU/AOU_case_counts.csv',
        biovu_counts='BioVU/Box_Download/cluster_counts_by_ancestry.csv'
    run:
        import pandas as pd
        import sys

        pheno = pd.read_csv(input.pheno_file, index_col='IID')
        print(pheno)
        aou = pd.read_csv(input.aou_counts, index_col=0)
        aou.index.name = 'PHENO'

        print('\nAOU')
        print(aou)

        biovu = pd.read_csv(input.biovu_counts, skiprows=7, index_col=0)
        biovu_col_map = dict(zip([str(i) for i in range(1, 6)], [f'cluster_vs_controls_{i}' for i in range(1, 6)]))
        biovu_col_map['Total'] = 'endometriosis'
        biovu = biovu.rename(columns=biovu_col_map)
        biovu = biovu.loc[['AFR', 'EUR']]
        biovu.index.name = 'ANCESTRY'
        print('\nBioVU')
        print(biovu)

        phenos = [f'cluster_vs_controls_{i}' for i in range(1, 6)]
        phenos.append('endometriosis')

        ukbb = pheno[pheno['Dataset'] == 'UKBB'].groupby('ANCESTRY')[phenos].sum()
        pmbb = pheno[pheno['Dataset'] == 'PMBB'].groupby('ANCESTRY')[phenos].sum()
        emerge = pheno[pheno['Dataset'] == 'eMERGE'].groupby('ANCESTRY')[phenos].sum()

        all = [aou, ukbb, pmbb, emerge, biovu]
        names = ['AOU', 'UKBB', 'PMBB', 'eMERGE', 'BioVU']

        sum = pd.DataFrame().reindex_like(ukbb).fillna(0)

        for name, df in zip(names, all):
            print(f'\n{name}')
            temp = df.copy()
            temp = temp.mask(temp < 30).fillna(0)
            print(temp)
            sum += temp

        print('\nTotal')
        print(sum)
        print(sum.sum(axis=0))
        sum.to_csv(output.counts)

        aou = aou.reset_index().melt(id_vars='PHENO')
        aou = aou.rename(columns={'PHENO': 'ANCESTRY'})
        aou['DATASET'] = 'AOU'

        ukbb = ukbb.reset_index().melt(id_vars='ANCESTRY')
        ukbb['DATASET'] = 'UKBB'

        pmbb = pmbb.reset_index().melt(id_vars='ANCESTRY')
        pmbb['DATASET'] = 'PMBB'

        emerge = emerge.reset_index().melt(id_vars='ANCESTRY')
        emerge['DATASET'] = 'eMERGE'

        biovu = biovu.reset_index().melt(id_vars='ANCESTRY')
        biovu['DATASET'] = 'eMERGE'

        all = pd.concat([pmbb, emerge, aou, ukbb, biovu])
        all = all[all['ANCESTRY'].isin(['AFR', 'EUR'])]
        print(all)
        all.to_csv(output.supp_table, index=False)

rule make_table_counts:
    output:
        table1='../Manuscript_Tables/table_1_datasets.csv',
        table2='../Manuscript_Tables/table_2_clusters.csv'
    input:
        pheno_file='../Feature_Extraction/cluster_phenotypes_multi_ancestry.csv',
        aou_counts='AOU/AOU_case_counts.csv',
        biovu_counts='BioVU/Box_Download/cluster_counts_by_ancestry.csv',
        full_pmbb_pheno='../Cluster_Training/Pheno/FULL_PMBB_pheno_covars.csv',
        training_clusters='../Cluster_Training/Data/NG_PMBB_clusters.csv',
        cluster_input='../Cluster_Training/Data/non_genotyped_PMBB_data_for_no_snps_clustering.csv'
    run:
        import pandas as pd
        import numpy as np
        import sys

        pheno = pd.read_csv(input.pheno_file, index_col='IID')
        pheno = pheno[pheno['ANCESTRY'].isin(['AFR', 'EUR'])]

        biovu = pd.read_csv(input.biovu_counts, skiprows=7, index_col=0)
        biovu_col_map = dict(zip([str(i) for i in range(1, 6)], [f'cluster_vs_controls_{i}' for i in range(1, 6)]))
        biovu_col_map['Total'] = 'endometriosis'
        biovu = biovu.rename(columns=biovu_col_map)
        biovu = biovu.loc[['AFR', 'EUR']]
        biovu.index.name = 'ANCESTRY'

        aou = pd.read_csv(input.aou_counts, index_col=0)
        aou.index.name = 'PHENO'
        print(aou)

        full_pheno = pd.read_csv(input.full_pmbb_pheno, index_col='PMBB_ID')
        cluster_data = pd.read_csv(input.cluster_input, index_col='IID')
        full_pheno = full_pheno.loc[cluster_data.index]

        cluster = pd.read_csv(input.training_clusters, index_col='IID')
        full_pheno['Cluster'] = cluster.loc[full_pheno.index, 'Cluster'].astype(int)

        mean_ages = pheno.groupby(['Dataset', 'endometriosis'])['CURRENT_AGE'].mean()
        mean_ages.loc[('AOU', 0.0)] = 56.838652
        mean_ages.loc[('AOU', 1.0)] = 52.230931

        std_ages = pheno.groupby(['Dataset', 'endometriosis'])['CURRENT_AGE'].std()
        std_ages.loc[('AOU', 0.0)] = 16.791040
        std_ages.loc[('AOU', 1.0)] = 12.828262

        afr_cc = pheno[pheno['ANCESTRY'] == 'AFR'].groupby(['Dataset', 'endometriosis'])['CURRENT_AGE'].count()
        afr_cc.loc[('AOU', 0.0)] = 31185
        afr_cc.loc[('AOU', 1.0)] = aou.loc['AFR', 'endometriosis']
        afr_cc.loc[('BioVU', 0.0)] = 7131
        afr_cc.loc[('BioVU', 1.0)] = biovu.loc['AFR', 'endometriosis']

        eur_cc = pheno[pheno['ANCESTRY'] == 'EUR'].groupby(['Dataset', 'endometriosis'])['CURRENT_AGE'].count()
        eur_cc.loc[('AOU', 0.0)] = 75768
        eur_cc.loc[('AOU', 1.0)] = aou.loc['EUR', 'endometriosis']
        eur_cc.loc[('BioVU', 0.0)] = 30537
        eur_cc.loc[('BioVU', 1.0)] = biovu.loc['EUR', 'endometriosis']

        afr_bv_case_age, afr_bv_case_std = 43.25483, 11.32966
        afr_bv_cont_age, afr_bv_cont_std = 45.52227, 18.26292
        eur_bv_case_age, eur_bv_case_std = 48.45608, 12.77753
        eur_bv_cont_age, eur_bv_cont_std = 55.1329, 18.04099

        mean_numer_temp = (afr_bv_cont_age * afr_cc.loc[('BioVU', 0)]) + (eur_bv_cont_age * eur_cc.loc[('BioVU', 0)])
        mean_denom_temp = afr_cc.loc[('BioVU', 0)] + eur_cc.loc[('BioVU', 0)]
        mean_ages.loc[('BioVU', 0.0)] = mean_numer_temp / mean_denom_temp

        mean_numer_temp = (afr_bv_case_age * afr_cc.loc[('BioVU', 1)]) + (eur_bv_case_age * eur_cc.loc[('BioVU', 1)])
        mean_denom_temp = afr_cc.loc[('BioVU', 1)] + eur_cc.loc[('BioVU', 1)]
        mean_ages.loc[('BioVU', 1.0)] = mean_numer_temp / mean_denom_temp

        std_numer_temp = afr_bv_cont_std ** 2 * (afr_cc.loc[('BioVU', 0)] - 1)
        std_numer_temp += eur_bv_cont_std ** 2 * (eur_cc.loc[('BioVU', 0)] - 1)
        std_denom_temp = afr_cc.loc[('BioVU', 0)] + eur_cc.loc[('BioVU', 0)] - 2
        std_ages.loc[('BioVU', 0.0)] = np.sqrt(std_numer_temp / std_denom_temp)

        std_numer_temp = afr_bv_case_std ** 2 * (afr_cc.loc[('BioVU', 1)] - 1)
        std_numer_temp += eur_bv_case_std ** 2 * (eur_cc.loc[('BioVU', 1)] - 1)
        std_denom_temp = afr_cc.loc[('BioVU', 1)] + eur_cc.loc[('BioVU', 1)] - 2
        std_ages.loc[('BioVU', 1.0)] = np.sqrt(std_numer_temp / std_denom_temp)

        phenos = [f'cluster_vs_controls_{int(i)}' for i in range(1, 6)]
        phenos.append('endometriosis')

        training = full_pheno['Cluster'].value_counts().sort_index()
        training.index = [f'cluster_vs_controls_{i}' for i in training.index]
        training.name = 'PMBB-TRAIN'
        training.loc['endometriosis'] = len(full_pheno)
        print(training)

        ukbb = pheno[pheno['Dataset'] == 'UKBB'][phenos].sum()
        ukbb.name = 'UKBB'
        pmbb = pheno[pheno['Dataset'] == 'PMBB'][phenos].sum()
        pmbb.name = 'PMBB'
        emerge = pheno[pheno['Dataset'] == 'eMERGE'][phenos].sum()
        emerge.name = 'eMERGE'
        biovu = biovu.sum()
        biovu.name = 'BioVU'
        aou = aou.sum()
        aou.name = 'AOU'

        all = [training, aou, emerge, pmbb, ukbb, biovu]

        table_2 = pd.concat(all, axis=1).transpose().astype(int)
        table_2.loc['ALL'] = table_2.drop(index='PMBB-TRAIN').sum()

        table_2_props = table_2.drop(columns='endometriosis').apply(lambda x: x / x.sum(), axis=1)

        need_rows, need_cols = table_2_props.index, table_2_props.columns

        table_2_fmt = table_2.loc[need_rows, need_cols].applymap(lambda x: f'{x:,}') + ' (' + table_2_props.applymap(lambda x: f'{x*100:.1f}') + '%)'
        table_2_fmt['Total'] = table_2['endometriosis'].apply(lambda x: f'{x:,}')
        print(table_2_fmt)

        pheno_map = {'cluster_vs_controls_1': '1: pain comorbidities',
                     'cluster_vs_controls_2': '2: uterine disorders',
                     'cluster_vs_controls_3': '3: pregnancy complications',
                     'cluster_vs_controls_4': '4: cardiometabolic comorbidities',
                     'cluster_vs_controls_5': '5: EHR-asymptomatic'}

        table_2_fmt.index.name = 'DATASET'
        table_2_fmt = table_2_fmt.rename(columns=pheno_map)
        table_2_fmt.to_csv(output.table2)

        table_1 = pd.DataFrame(index=pd.MultiIndex.from_product([table_2.index, [0, 1]]), columns=['AFR', 'EUR', 'Total', 'AGE-mean', 'AGE-std'])
        table_1 = table_1.drop(('PMBB-TRAIN', 0))
        table_1['AGE-mean'] = mean_ages
        table_1['AGE-std'] = std_ages
        table_1['AFR'] = afr_cc
        table_1['EUR'] = eur_cc
        table_1['Total'] = table_1['AFR'] + table_1['EUR']

        mean_product = table_1['AGE-mean'] * table_1['Total']
        sd_product = table_1['AGE-std']**2 * table_1['Total']

        cont_mask = table_1.index[table_1.index.get_level_values(1) == 0]
        case_mask = table_1.index[table_1.index.get_level_values(1) == 1]

        table_1.loc[('ALL', 0), ['AGE-mean']] = (table_1.loc[cont_mask]['AGE-mean'] * table_1.loc[cont_mask]['Total']).sum() / table_1.loc[cont_mask]['Total'].sum()
        table_1.loc[('ALL', 0), ['AGE-std']] = np.sqrt(((table_1.loc[cont_mask]['AGE-std']**2) * table_1.loc[cont_mask]['Total']).sum() / table_1.loc[cont_mask]['Total'].sum())
        table_1.loc[('ALL', 0), ['AFR', 'EUR', 'Total']] = table_1.loc[cont_mask][['AFR', 'EUR', 'Total']].sum()

        table_1.loc[('ALL', 1), ['AGE-mean']] = (table_1.loc[case_mask]['AGE-mean'] * table_1.loc[case_mask]['Total']).sum() / table_1.loc[case_mask]['Total'].sum()
        table_1.loc[('ALL', 1), ['AGE-std']] = np.sqrt(((table_1.loc[case_mask]['AGE-std']**2) * table_1.loc[case_mask]['Total']).sum() / table_1.loc[case_mask]['Total'].sum())
        table_1.loc[('ALL', 1), ['AFR', 'EUR', 'Total']] = table_1.loc[case_mask][['AFR', 'EUR', 'Total']].sum()


        table_1.loc[('PMBB-TRAIN', 1), ['Total', 'AGE-mean', 'AGE-std']] = [len(full_pheno), full_pheno['DATA_PULL_AGE'].mean(), full_pheno['DATA_PULL_AGE'].std()]
        table_1['CT-fmt'] = table_1.apply(lambda x: f'{x["Total"]:,} ({x["AFR"]:,} / {x["EUR"]:,})'.replace('.0', ''), axis=1)
        table_1['AGE-fmt'] = table_1.apply(lambda x: f'{x["AGE-mean"]:.1f} ({x["AGE-std"]:.1f})', axis=1)
        table_1.index.names = ['DATASET', 'Endometriosis']

        print(table_1)
        table_1.to_csv(output.table1)